Ext.define("coon.user.UserProvider",{mixins:{observable:"Ext.util.Observable"},user:null,constructor:function(b){var a=this;Ext.apply(a,b);a.mixins.observable.constructor.call(a)},loadUser:Ext.emptyFn,isUserLoading:Ext.emptyFn,getUser:function(){return this.user}});Ext.define("coon.user.DefaultUserProvider",{extend:"coon.user.UserProvider",isLoading:!1,loadUser:function(a){this.isLoading=!0;if(a&&a.forceFail){this.user=null;this.fireEvent("cn_user-userloadfailure",this,a);this.isLoading=!1;return}this.user=Ext.create("coon.user.model.UserModel",{id:999999,firstname:"David",lastname:"Gardner",username:"dgardner",emailAddress:"david.gardner@menzies-elementary-school.edu"});this.fireEvent("cn_user-userload",this,this.user);this.isLoading=!1},isUserLoading:function(){return this.isLoading}});Ext.define("coon.user.Manager",{singleton:!0,requires:["coon.user.DefaultUserProvider"],providerConfig:"coon.user.DefaultUserProvider",userProvider:null,loadUser:function(d){var a=this,c=a.getUserProvider(),e={},b;if(c.isUserLoading()){Ext.raise({sourceClass:Ext.getClassName(a),isLoading:!0,msg:Ext.getClassName(a)+"#userProvider is already loading an user."})}e=d?d.params||{}:{};b=Ext.apply({scope:null,success:Ext.emptyFn,failure:Ext.emptyFn},d||{});if((b.success&&!Ext.isFunction(b.success))||(b.failure&&!Ext.isFunction(b.failure))){Ext.raise({sourceClass:Ext.getClassName(a),success:b.success,failure:b.failure,msg:Ext.getClassName(a)+"#loadUser expects success and failure to be valid callback functions."})}a.callbackOptions=b;c.on("cn_user-userload",a.onUserProviderLoad,a,{single:!0});c.on("cn_user-userloadfailure",a.onUserProviderLoadFailure,a,{single:!0});c.loadUser(e)},getUser:function(){return this.getUserProvider().getUser()},getUserProvider:function(){if(!this.userProvider){this.userProvider=this.setUserProvider(this.providerConfig)}return this.userProvider},setUserProvider:function(a){if(this.userProvider){this.removeUserProviderListeners(this.userProvider)}this.userProvider=this.initUserProvider(a);return this.userProvider},privates:{callbackOptions:null,removeUserProviderListeners:function(b){var a=this;a.callbackOptions=null;b.un("cn_user-userload",a.onUserProviderLoad,a);b.un("cn_user-userloadfailure",a.onUserProviderLoadFailure,a)},onUserProviderLoad:function(d,c){var b=this,a=b.callbackOptions;if(a&&a.success){a.success.apply(a.scope,[c])}b.removeUserProviderListeners(d)},onUserProviderLoadFailure:function(c,d){var b=this,a=b.callbackOptions;if(a&&a.failure){a.failure.apply(a.scope,[d])}b.removeUserProviderListeners(c)},initUserProvider:function(a){if(a instanceof coon.user.UserProvider){return a}var b=Ext.isString(a)?a:(Ext.isObject(a)?a.cnclass:undefined),d={},c;if(!b){Ext.raise({sourceClass:Ext.getClassName(this),providerConfig:a,msg:Ext.getClassName(this)+" needs providerConfig to be configured as fqn or an object with a \"cnclass\"-property providing the fqn."})}if(!Ext.ClassManager.get(b)){Ext.raise({sourceClass:Ext.getClassName(this),className:b,msg:Ext.getClassName(this)+" requires the class specified with providerConfig-argument to be loaded."})}if(Ext.isObject(a)){d=a;delete d.className}c=Ext.create(b,d);if(!(c instanceof coon.user.UserProvider)){Ext.raise({sourceClass:Ext.getClassName(this),providerClass:c,msg:Ext.getClassName(this)+" providerConfig to represent an instance of coon.user.UserProvider."})}return c}}});Ext.define("coon.user.data.user.BaseSchema",{extend:"coon.core.data.schema.BaseSchema",alias:"schema.cn_user-datauserbaseschema",namespace:"coon.user.model",id:"cn_user-datauserbaseschema"});Ext.define("coon.user.model.UserModel",{extend:"coon.core.data.BaseModel",requires:["coon.user.data.user.BaseSchema"],schema:"cn_user-datauserbaseschema",fields:[{name:"firstname",type:"string",validators:[{type:"presence"}]},{name:"lastname",type:"string",validators:[{type:"presence"}]},{name:"username",type:"string",validators:[{type:"exclusion",list:["admin","administrator","user"]},{type:"presence"},{type:"length",min:3}]},{name:"emailAddress",type:"string",validators:[{type:"presence"},{type:"email"}]},{name:"isRoot",type:"boolean"},{name:"lastLogin",type:"date",dateFormat:"timestamp",persist:!1},{name:"password",defaultValue:"",validators:[{type:"exclusion",list:["password","1234","test"]}]}]});Ext.define("coon.user.Util",{requires:["coon.user.model.UserModel"],singleton:!0,BASIC_AUTH:1,userToCredentials:function(a,b){const c=this;if(!(a instanceof coon.user.model.UserModel)){Ext.raise({msg:"\"userModel\" must be an instance of coon.user.model.UserModel",userModel:a})}switch(b){case c.BASIC_AUTH:return btoa(a.get("username")+":"+a.get("password"));default:Ext.raise({msg:"no valid value for \"format\" specified",format:b});}}});Ext.define("coon.user.view.authentication.AuthForm",{extend:"coon.comp.form.AutoCompleteForm",alias:"widget.cn_user-authform",formName:"authForm",autoCompleteTrigger:{reference:"loginButton"},defaultButton:"loginButton",bodyPadding:"20 20",cls:"cn_user-authform",header:!1,width:415,loginButtonIconCls:"fas fa-angle-right",loginButtonIconClsBusy:"fas fa-spinner fa-spin",layout:{type:"vbox",align:"stretch"},defaults:{margin:"5 0"},items:[{xtype:"label",cls:"head-label",text:"Sign in"},{xtype:"textfield",name:"userid",allowBlank:!1,emptyText:"user id"},{margin:"24 0 0 0",xtype:"textfield",emptyText:"password",inputType:"password",name:"password",allowBlank:!1},{margin:"24 0 0 0",xtype:"button",reference:"loginButton",text:"Login",formBind:!0,handler:function(e){var d=this,a=d.up("cn_user-authform"),c=a.down("textfield[name=userid]").getValue(),b=a.down("textfield[name=password]").getValue();a.showAuthorizationFailed(!1);a.fireEvent("cn_user-authrequest",a,{userid:c,password:b})}},{xtype:"label",hidden:!0,reference:"authFailedLabel",text:"Authorization failed. Please try again."}],initComponent:function(){var a=this;for(var b=0,c=a.items.length;b<c;b++){if(a.items[b].reference==="loginButton"){a.items[b].iconCls=a.loginButtonIconCls}}a.callParent(arguments)},showAuthorizationBusy:function(e){var a=this,d=a.down("textfield[name=userid]"),c=a.down("textfield[name=password]"),b=a.lookupReference("loginButton");if(e){b.setIconCls(a.loginButtonIconClsBusy);b.setDisabled(!0);d.setDisabled(!0);c.setDisabled(!0)}else {b.setIconCls(a.loginButtonIconCls);d.setDisabled(!1);c.setDisabled(!1);b.setDisabled(!1)}return this},showAuthorizationFailed:function(b){var c=this,a=c.lookupReference("authFailedLabel");a.setVisible(b);return this}});Ext.define("coon.user.view.authentication.AuthWindow",{extend:"coon.comp.window.LockingWindow",alias:"widget.cn_user-authwindow",requires:["coon.user.view.authentication.AuthForm"],defaultFocus:"cn_user-authform",bodyCls:"cn_user-authwindow",title:"Log in",layout:{type:"vbox",align:"center",pack:"center"},items:[{xtype:"cn_user-authform"}],listeners:Ext.isModern?{initialize:"onWindowAfterRender"}:{afterrender:"onWindowAfterRender"},privates:{onWindowAfterRender:function(){var a=this;a.relayEvents(a.down("cn_user-authform"),["cn_user-authrequest"])}}});Ext.define("coon.user.view.toolbar.UserImageItem",{extend:"coon.comp.Img",alias:"widget.cn_user-toolbaruserimageitem",cls:"cn_user-toolbaruserimageitem",autoEl:"div"});Ext.define("coon.user.app.PackageController",{extend:"coon.core.app.PackageController",requires:["coon.user.Manager","coon.user.model.UserModel","coon.user.view.authentication.AuthWindow","coon.user.view.toolbar.UserImageItem"],authWindow:null,preLaunchHook:function(a){if(!coon.user.Manager.getUser()){this.createAuthWindow();return !1}return !0},postLaunchHook:function(){var a=coon.user.Manager.getUser();if(!a){Ext.raise({source:Ext.getClassName(this),msg:Ext.getClassName(this)+"#postLaunchHook requires a valid user"})}return {permaNav:{index:1000,items:[{xtype:"tbtext",text:a.get("username")},{xtype:"cn_user-toolbaruserimageitem"}]}}},userAvailable:function(b){var a=this;if(!(b instanceof coon.user.model.UserModel)){Ext.raise({source:Ext.getClassName(a),msg:"Method needs userModel to be instance of coon.user.model.UserModel"})}if(a.authWindow){a.authWindow.close()}a.getApplication().launch()},userWasNotAuthorized:Ext.emptyFn,privates:{createAuthWindow:function(){this.authWindow=Ext.create("coon.user.view.authentication.AuthWindow",{listeners:{destroy:function(){this.authWindow=null},"cn_user-authrequest":this.onAuthRequest,scope:this}});return this.authWindow},onUserLoadSuccess:function(c){const b=this,a=b.authWindow;if(a){a.down("cn_user-authform").showAuthorizationBusy(!1)}b.userAvailable(c)},onUserLoadFailure:function(c){const b=this,a=b.authWindow;if(a){a.down("cn_user-authform").showAuthorizationBusy(!1)}b.userWasNotAuthorized(c)},onAuthRequest:function(b,c){var a=this;b.showAuthorizationBusy(!0);coon.user.Manager.loadUser({params:c,success:a.onUserLoadSuccess,failure:a.onUserLoadFailure,scope:a})}}});